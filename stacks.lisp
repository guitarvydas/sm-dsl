(in-package "SM-DSL")

(defclass network (stack-dsl::%typed-value)
  ((%field-type-pipeline :accessor %field-type-pipeline :initform "pipeline")
   (pipeline :accessor pipeline)
   (%field-type-machineBag :accessor %field-type-machineBag :initform "machineBag")
   (machineBag :accessor machineBag)
   ) (:default-initargs :%type "network"))

(defclass network-stack (stack-dsl::%typed-stack) ())
(defmethod initialize-instance :after ((self network-stack) &key &allow-other-keys)
  (setf (stack-dsl::%element-type self) "network"))

(defclass machineBag (stack-dsl::%bag) () (:default-initargs :%type "machineBag"))
(defmethod initialize-instance :after ((self machineBag) &key &allow-other-keys)  ;; type for items in bag
	   (setf (stack-dsl::%element-type self) "machineBag"))
(defclass machineBag-stack(stack-dsl::%typed-stack) ())
(defmethod initialize-instance :after ((self machineBag-stack) &key &allow-other-keys)
	   (setf (stack-dsl::%element-type self) "machineBag"))
(defclass machineDescriptor (stack-dsl::%typed-value)
  ((%field-type-statesBag :accessor %field-type-statesBag :initform "statesBag")
   (statesBag :accessor statesBag)
   (%field-type-initiallyDescriptor :accessor %field-type-initiallyDescriptor :initform "initiallyDescriptor")
   (initiallyDescriptor :accessor initiallyDescriptor)
   (%field-type-name :accessor %field-type-name :initform "name")
   (name :accessor name)
   ) (:default-initargs :%type "machineDescriptor"))

(defclass machineDescriptor-stack (stack-dsl::%typed-stack) ())
(defmethod initialize-instance :after ((self machineDescriptor-stack) &key &allow-other-keys)
  (setf (stack-dsl::%element-type self) "machineDescriptor"))

(defclass initiallyDescriptor (stack-dsl::%map) () (:default-initargs :%type "initiallyDescriptor"))
(defmethod initialize-instance :after ((self initiallyDescriptor) &key &allow-other-keys)  ;; type for items in map
	   (setf (stack-dsl::%element-type self) "initiallyDescriptor"))
(defclass initiallyDescriptor-stack(stack-dsl::%typed-stack) ())
(defmethod initialize-instance :after ((self initiallyDescriptor-stack) &key &allow-other-keys)
	   (setf (stack-dsl::%element-type self) "initiallyDescriptor"))
(defclass statesBag (stack-dsl::%bag) () (:default-initargs :%type "statesBag"))
(defmethod initialize-instance :after ((self statesBag) &key &allow-other-keys)  ;; type for items in bag
	   (setf (stack-dsl::%element-type self) "statesBag"))
(defclass statesBag-stack(stack-dsl::%typed-stack) ())
(defmethod initialize-instance :after ((self statesBag-stack) &key &allow-other-keys)
	   (setf (stack-dsl::%element-type self) "statesBag"))
(defclass state (stack-dsl::%typed-value)
  ((%field-type-eventsBag :accessor %field-type-eventsBag :initform "eventsBag")
   (eventsBag :accessor eventsBag)
   (%field-type-name :accessor %field-type-name :initform "name")
   (name :accessor name)
   ) (:default-initargs :%type "state"))

(defclass state-stack (stack-dsl::%typed-stack) ())
(defmethod initialize-instance :after ((self state-stack) &key &allow-other-keys)
  (setf (stack-dsl::%element-type self) "state"))

(defclass eventsBag (stack-dsl::%bag) () (:default-initargs :%type "eventsBag"))
(defmethod initialize-instance :after ((self eventsBag) &key &allow-other-keys)  ;; type for items in bag
	   (setf (stack-dsl::%element-type self) "eventsBag"))
(defclass eventsBag-stack(stack-dsl::%typed-stack) ())
(defmethod initialize-instance :after ((self eventsBag-stack) &key &allow-other-keys)
	   (setf (stack-dsl::%element-type self) "eventsBag"))
(defclass event (stack-dsl::%typed-value)
  ((%field-type-statementsMap :accessor %field-type-statementsMap :initform "statementsMap")
   (statementsMap :accessor statementsMap)
   (%field-type-name :accessor %field-type-name :initform "name")
   (name :accessor name)
   ) (:default-initargs :%type "event"))

(defclass event-stack (stack-dsl::%typed-stack) ())
(defmethod initialize-instance :after ((self event-stack) &key &allow-other-keys)
  (setf (stack-dsl::%element-type self) "event"))


(defclass onName (stack-dsl::%string) () (:default-initargs :%type "onName"))
(defclass onName-stack (stack-dsl::%typed-stack) ())
(defmethod initialize-instance :after ((self onName-stack) &key &allow-other-keys)
  (setf (stack-dsl::%element-type self) "onName"))

(defclass statementsMap (stack-dsl::%map) () (:default-initargs :%type "statementsMap"))
(defmethod initialize-instance :after ((self statementsMap) &key &allow-other-keys)  ;; type for items in map
	   (setf (stack-dsl::%element-type self) "statementsMap"))
(defclass statementsMap-stack(stack-dsl::%typed-stack) ())
(defmethod initialize-instance :after ((self statementsMap-stack) &key &allow-other-keys)
	   (setf (stack-dsl::%element-type self) "statementsMap"))

(defclass statement (stack-dsl::%compound-type) () (:default-initargs :%type "statement"))
(defmethod initialize-instance :after ((self statement) &key &allow-other-keys)
  (setf (stack-dsl::%type-list self) '("callStatement" "sendStatement")))
(defclass statement-stack (stack-dsl::%typed-stack) () (:default-initargs :%element-type "statement"))

(defclass sendStatement (stack-dsl::%typed-value)
  ((%field-type-expression :accessor %field-type-expression :initform "expression")
   (expression :accessor expression)
   (%field-type-name :accessor %field-type-name :initform "name")
   (name :accessor name)
   (%field-type-callkind :accessor %field-type-callkind :initform "callkind")
   (callkind :accessor callkind :initform 'send)) (:default-initargs :%type "sendStatement"))

(defclass sendStatement-stack (stack-dsl::%typed-stack) ())
(defmethod initialize-instance :after ((self sendStatement-stack) &key &allow-other-keys)
  (setf (stack-dsl::%element-type self) "sendStatement"))

(defclass callStatement (stack-dsl::%typed-value)
  ((%field-type-expressionMap :accessor %field-type-expressionMap :initform "expressionMap")
   (expressionMap :accessor expressionMap)
   (%field-type-name :accessor %field-type-name :initform "name")
   (name :accessor name)
   (%field-type-callkind :accessor %field-type-callkind :initform "callkind")
   (callkind :accessor callkind :initform 'call)) (:default-initargs :%type "callStatement"))

(defclass callStatement-stack (stack-dsl::%typed-stack) ())
(defmethod initialize-instance :after ((self callStatement-stack) &key &allow-other-keys)
  (setf (stack-dsl::%element-type self) "callStatement"))

(defclass expressionMap (stack-dsl::%map) () (:default-initargs :%type "expressionMap"))
(defmethod initialize-instance :after ((self expressionMap) &key &allow-other-keys)  ;; type for items in map
	   (setf (stack-dsl::%element-type self) "expressionMap"))
(defclass expressionMap-stack(stack-dsl::%typed-stack) ())
(defmethod initialize-instance :after ((self expressionMap-stack) &key &allow-other-keys)
	   (setf (stack-dsl::%element-type self) "expressionMap"))

(defclass expression (stack-dsl::%compound-type) () (:default-initargs :%type "expression"))
(defmethod initialize-instance :after ((self expression) &key &allow-other-keys)
  (setf (stack-dsl::%type-list self) '("callExpr" "dollarExpr" "rawExpr")))
(defclass expression-stack (stack-dsl::%typed-stack) () (:default-initargs :%element-type "expression"))

(defclass dollarExpr (stack-dsl::%typed-value)
  ((%field-type-name :accessor %field-type-name :initform "name")
   (name :accessor name)
   (%field-type-exprkind :accessor %field-type-exprkind :initform "exprkind")
   (exprkind :accessor exprkind :initform 'dollar)) (:default-initargs :%type "dollarExpr"))

(defclass dollarExpr-stack (stack-dsl::%typed-stack) ())
(defmethod initialize-instance :after ((self dollarExpr-stack) &key &allow-other-keys)
  (setf (stack-dsl::%element-type self) "dollarExpr"))

(defclass callExpr (stack-dsl::%typed-value)
  ((%field-type-expressionMap :accessor %field-type-expressionMap :initform "expressionMap")
   (expressionMap :accessor expressionMap)
   (%field-type-name :accessor %field-type-name :initform "name")
   (name :accessor name)
   (%field-type-exprkind :accessor %field-type-exprkind :initform "exprkind")
   (exprkind :accessor exprkind :initform 'function)) (:default-initargs :%type "callExpr"))

(defclass callExpr-stack (stack-dsl::%typed-stack) ())
(defmethod initialize-instance :after ((self callExpr-stack) &key &allow-other-keys)
  (setf (stack-dsl::%element-type self) "callExpr"))

(defclass rawExpr (stack-dsl::%typed-value)
  ((%field-type-rawText :accessor %field-type-rawText :initform "rawText")
   (rawText :accessor rawText)
   (%field-type-exprkind :accessor %field-type-exprkind :initform "exprkind")
   (exprkind :accessor exprkind :initform 'raw)) (:default-initargs :%type "rawExpr"))

(defclass rawExpr-stack (stack-dsl::%typed-stack) ())
(defmethod initialize-instance :after ((self rawExpr-stack) &key &allow-other-keys)
  (setf (stack-dsl::%element-type self) "rawExpr"))


(defclass rawText (stack-dsl::%string) () (:default-initargs :%type "rawText"))
(defclass rawText-stack (stack-dsl::%typed-stack) ())
(defmethod initialize-instance :after ((self rawText-stack) &key &allow-other-keys)
  (setf (stack-dsl::%element-type self) "rawText"))


(defclass name (stack-dsl::%string) () (:default-initargs :%type "name"))
(defclass name-stack (stack-dsl::%typed-stack) ())
(defmethod initialize-instance :after ((self name-stack) &key &allow-other-keys)
  (setf (stack-dsl::%element-type self) "name"))

(defclass pipeline (stack-dsl::%map) () (:default-initargs :%type "pipeline"))
(defmethod initialize-instance :after ((self pipeline) &key &allow-other-keys)  ;; type for items in map
	   (setf (stack-dsl::%element-type self) "pipeline"))
(defclass pipeline-stack(stack-dsl::%typed-stack) ())
(defmethod initialize-instance :after ((self pipeline-stack) &key &allow-other-keys)
	   (setf (stack-dsl::%element-type self) "pipeline"))

(defclass callkind (%enum) () (:default-initargs :%type "callkind"))

(defmethod initialize-instance :after ((self callkind) &key &allow-other-keys)
  (setf (stack-dsl::%value-list self) '(call send)))


(defclass callkind-stack (stack-dsl::%typed-stack) ())
(defmethod initialize-instance :after ((self callkind-stack) &key &allow-other-keys)
  (setf (stack-dsl::%element-type self) "callkind"))

(defclass exprkind (%enum) () (:default-initargs :%type "exprkind"))

(defmethod initialize-instance :after ((self exprkind) &key &allow-other-keys)
  (setf (stack-dsl::%value-list self) '(raw function dollar)))


(defclass exprkind-stack (stack-dsl::%typed-stack) ())
(defmethod initialize-instance :after ((self exprkind-stack) &key &allow-other-keys)
  (setf (stack-dsl::%element-type self) "exprkind"))


;; check forward types
(stack-dsl::%ensure-existence 'network)
(stack-dsl::%ensure-existence 'machineBag)
(stack-dsl::%ensure-existence 'pipeline)
(stack-dsl::%ensure-existence 'machineDescriptor)
(stack-dsl::%ensure-existence 'name)
(stack-dsl::%ensure-existence 'initiallyDescriptor)
(stack-dsl::%ensure-existence 'statesBag)
(stack-dsl::%ensure-existence 'state)
(stack-dsl::%ensure-existence 'eventsBag)
(stack-dsl::%ensure-existence 'event)
(stack-dsl::%ensure-existence 'statementsMap)
(stack-dsl::%ensure-existence 'onName)
(stack-dsl::%ensure-existence 'statement)
(stack-dsl::%ensure-existence 'sendStatement)
(stack-dsl::%ensure-existence 'callStatement)
(stack-dsl::%ensure-existence 'callkind)
(stack-dsl::%ensure-existence 'expression)
(stack-dsl::%ensure-existence 'expressionMap)
(stack-dsl::%ensure-existence 'rawExpr)
(stack-dsl::%ensure-existence 'dollarExpr)
(stack-dsl::%ensure-existence 'callExpr)
(stack-dsl::%ensure-existence 'exprkind)
(stack-dsl::%ensure-existence 'rawText)

(defclass environment ()
  ((%water-mark :accessor %water-mark :initform nil)
   (input-network :accessor input-network :initform (make-instance 'network-stack))
   (output-network :accessor output-network :initform (make-instance 'network-stack))
   (input-machineBag :accessor input-machineBag :initform (make-instance 'machineBag-stack))
   (output-machineBag :accessor output-machineBag :initform (make-instance 'machineBag-stack))
   (input-pipeline :accessor input-pipeline :initform (make-instance 'pipeline-stack))
   (output-pipeline :accessor output-pipeline :initform (make-instance 'pipeline-stack))
   (input-machineDescriptor :accessor input-machineDescriptor :initform (make-instance 'machineDescriptor-stack))
   (output-machineDescriptor :accessor output-machineDescriptor :initform (make-instance 'machineDescriptor-stack))
   (input-name :accessor input-name :initform (make-instance 'name-stack))
   (output-name :accessor output-name :initform (make-instance 'name-stack))
   (input-initiallyDescriptor :accessor input-initiallyDescriptor :initform (make-instance 'initiallyDescriptor-stack))
   (output-initiallyDescriptor :accessor output-initiallyDescriptor :initform (make-instance 'initiallyDescriptor-stack))
   (input-statesBag :accessor input-statesBag :initform (make-instance 'statesBag-stack))
   (output-statesBag :accessor output-statesBag :initform (make-instance 'statesBag-stack))
   (input-state :accessor input-state :initform (make-instance 'state-stack))
   (output-state :accessor output-state :initform (make-instance 'state-stack))
   (input-eventsBag :accessor input-eventsBag :initform (make-instance 'eventsBag-stack))
   (output-eventsBag :accessor output-eventsBag :initform (make-instance 'eventsBag-stack))
   (input-event :accessor input-event :initform (make-instance 'event-stack))
   (output-event :accessor output-event :initform (make-instance 'event-stack))
   (input-statementsMap :accessor input-statementsMap :initform (make-instance 'statementsMap-stack))
   (output-statementsMap :accessor output-statementsMap :initform (make-instance 'statementsMap-stack))
   (input-onName :accessor input-onName :initform (make-instance 'onName-stack))
   (output-onName :accessor output-onName :initform (make-instance 'onName-stack))
   (input-statement :accessor input-statement :initform (make-instance 'statement-stack))
   (output-statement :accessor output-statement :initform (make-instance 'statement-stack))
   (input-sendStatement :accessor input-sendStatement :initform (make-instance 'sendStatement-stack))
   (output-sendStatement :accessor output-sendStatement :initform (make-instance 'sendStatement-stack))
   (input-callStatement :accessor input-callStatement :initform (make-instance 'callStatement-stack))
   (output-callStatement :accessor output-callStatement :initform (make-instance 'callStatement-stack))
   (input-callkind :accessor input-callkind :initform (make-instance 'callkind-stack))
   (output-callkind :accessor output-callkind :initform (make-instance 'callkind-stack))
   (input-expression :accessor input-expression :initform (make-instance 'expression-stack))
   (output-expression :accessor output-expression :initform (make-instance 'expression-stack))
   (input-expressionMap :accessor input-expressionMap :initform (make-instance 'expressionMap-stack))
   (output-expressionMap :accessor output-expressionMap :initform (make-instance 'expressionMap-stack))
   (input-rawExpr :accessor input-rawExpr :initform (make-instance 'rawExpr-stack))
   (output-rawExpr :accessor output-rawExpr :initform (make-instance 'rawExpr-stack))
   (input-dollarExpr :accessor input-dollarExpr :initform (make-instance 'dollarExpr-stack))
   (output-dollarExpr :accessor output-dollarExpr :initform (make-instance 'dollarExpr-stack))
   (input-callExpr :accessor input-callExpr :initform (make-instance 'callExpr-stack))
   (output-callExpr :accessor output-callExpr :initform (make-instance 'callExpr-stack))
   (input-exprkind :accessor input-exprkind :initform (make-instance 'exprkind-stack))
   (output-exprkind :accessor output-exprkind :initform (make-instance 'exprkind-stack))
   (input-rawText :accessor input-rawText :initform (make-instance 'rawText-stack))
   (output-rawText :accessor output-rawText :initform (make-instance 'rawText-stack))
   ))

(defmethod %memoStacks ((self environment))
  (setf (%water-mark self)
	(list
	 (input-network self)
	 (output-network self)
	 (input-machineBag self)
	 (output-machineBag self)
	 (input-pipeline self)
	 (output-pipeline self)
	 (input-machineDescriptor self)
	 (output-machineDescriptor self)
	 (input-name self)
	 (output-name self)
	 (input-initiallyDescriptor self)
	 (output-initiallyDescriptor self)
	 (input-statesBag self)
	 (output-statesBag self)
	 (input-state self)
	 (output-state self)
	 (input-eventsBag self)
	 (output-eventsBag self)
	 (input-event self)
	 (output-event self)
	 (input-statementsMap self)
	 (output-statementsMap self)
	 (input-onName self)
	 (output-onName self)
	 (input-statement self)
	 (output-statement self)
	 (input-sendStatement self)
	 (output-sendStatement self)
	 (input-callStatement self)
	 (output-callStatement self)
	 (input-callkind self)
	 (output-callkind self)
	 (input-expression self)
	 (output-expression self)
	 (input-expressionMap self)
	 (output-expressionMap self)
	 (input-rawExpr self)
	 (output-rawExpr self)
	 (input-dollarExpr self)
	 (output-dollarExpr self)
	 (input-callExpr self)
	 (output-callExpr self)
	 (input-exprkind self)
	 (output-exprkind self)
	 (input-rawText self)
	 (output-rawText self)
	 )))

(defmethod %memoCheck ((self environment))
  (let ((wm (%water-mark self)))
    (unless (and
	     (eq (nth 0 wm) (input-network self))
	     (eq (nth 1 wm) (output-network self))
	     (eq (nth 2 wm) (input-machineBag self))
	     (eq (nth 3 wm) (output-machineBag self))
	     (eq (nth 4 wm) (input-pipeline self))
	     (eq (nth 5 wm) (output-pipeline self))
	     (eq (nth 6 wm) (input-machineDescriptor self))
	     (eq (nth 7 wm) (output-machineDescriptor self))
	     (eq (nth 8 wm) (input-name self))
	     (eq (nth 9 wm) (output-name self))
	     (eq (nth 10 wm) (input-initiallyDescriptor self))
	     (eq (nth 11 wm) (output-initiallyDescriptor self))
	     (eq (nth 12 wm) (input-statesBag self))
	     (eq (nth 13 wm) (output-statesBag self))
	     (eq (nth 14 wm) (input-state self))
	     (eq (nth 15 wm) (output-state self))
	     (eq (nth 16 wm) (input-eventsBag self))
	     (eq (nth 17 wm) (output-eventsBag self))
	     (eq (nth 18 wm) (input-event self))
	     (eq (nth 19 wm) (output-event self))
	     (eq (nth 20 wm) (input-statementsMap self))
	     (eq (nth 21 wm) (output-statementsMap self))
	     (eq (nth 22 wm) (input-onName self))
	     (eq (nth 23 wm) (output-onName self))
	     (eq (nth 24 wm) (input-statement self))
	     (eq (nth 25 wm) (output-statement self))
	     (eq (nth 26 wm) (input-sendStatement self))
	     (eq (nth 27 wm) (output-sendStatement self))
	     (eq (nth 28 wm) (input-callStatement self))
	     (eq (nth 29 wm) (output-callStatement self))
	     (eq (nth 30 wm) (input-callkind self))
	     (eq (nth 31 wm) (output-callkind self))
	     (eq (nth 32 wm) (input-expression self))
	     (eq (nth 33 wm) (output-expression self))
	     (eq (nth 34 wm) (input-expressionMap self))
	     (eq (nth 35 wm) (output-expressionMap self))
	     (eq (nth 36 wm) (input-rawExpr self))
	     (eq (nth 37 wm) (output-rawExpr self))
	     (eq (nth 38 wm) (input-dollarExpr self))
	     (eq (nth 39 wm) (output-dollarExpr self))
	     (eq (nth 40 wm) (input-callExpr self))
	     (eq (nth 41 wm) (output-callExpr self))
	     (eq (nth 42 wm) (input-exprkind self))
	     (eq (nth 43 wm) (output-exprkind self))
	     (eq (nth 44 wm) (input-rawText self))
	     (eq (nth 45 wm) (output-rawText self))
	     ))
    (error "stack depth incorrect")))
