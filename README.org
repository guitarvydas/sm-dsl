* intro
  Simple V0 version of a state machine DSL.  See comments in test.lisp for details.
* under development
* 1a. generate stacks.lisp
#+name: dsl
#+begin_src lisp :results output
 (uiop:run-program "rm -rf ~/.cache/common-lisp ;
 rm -rf ~/quicklisp/local-projects/*/*.fasl ;
 rm -rf ~/quicklisp/local/projects/*/*~")
 (ql:quickload :sm-dsl)
#+end_src

#+name: dsl
#+begin_src lisp :results output
  (load (sm-dsl::path "generate-stacks.lisp"))
#+end_src
#+name: dsl
#+begin_src lisp :results output
  (sm-dsl::generate-stacks)
#+end_src

#+name: dsl
#+begin_src lisp :results output
#+end_src

* 1b. generate sm-dsl.lisp
#+name: dsl
#+begin_src lisp :results output
 (uiop:run-program "rm -rf ~/.cache/common-lisp ;
 rm -rf ~/quicklisp/local-projects/*/*.fasl ;
 rm -rf ~/quicklisp/local/projects/*/*~")
 (ql:quickload :sm-dsl/generate)
#+end_src

#+name: dsl
#+begin_src lisp :results output
  #| generates sm-dsl.lisp |#
 (sm-dsl::generate "SM-DSL")
#+end_src

* use
#+name: dsl
#+begin_src lisp :results output
  #| checks that :sm-dsl/use can be loaded |#
 (uiop:run-program "rm -rf ~/.cache/common-lisp ;
 rm -rf ~/quicklisp/local-projects/*.fasl ;
 rm -rf ~/quicklisp/local/projects/*~")
 (ql:quickload :stack-dsl/use)
#+end_src

* development
  Development test sequence...

#+name: dsl
#+begin_src lisp :results output
 (uiop:run-program "rm -rf ~/.cache/common-lisp ;
 rm -rf ~/quicklisp/local-projects/*.fasl ;
 rm -rf ~/quicklisp/local/projects/*~")
 (proclaim '(optimize (debug 3) (safety 3) (speed 0)))
 (declaim (sb-ext:muffle-conditions style-warning))
 (ql:quickload :stack-dsl/generate)
#+end_src

#+name: dsl
#+begin_src lisp :results output
 (stack-dsl::generate)
 (ql:quickload :sm-dsl)
 (ql:quickload :sm-dsl/generate-stacks)
#+end_src
#+name: dsl
#+begin_src lisp :results output
  (declaim (sb-ext:muffle-conditions style-warning))
  (sm-dsl::generate-stacks)
  (load (sm-dsl::path "generate-test.lisp"))
 (load (sm-dsl::path "transpile-test.lisp"))
  (load (sm-dsl::path "stacks.lisp"))
  (load (sm-dsl::path "classes.lisp"))
  (load (sm-dsl::path "macros.lisp"))
  (load (sm-dsl::path "mechanisms.lisp"))
 (sm-dsl::generate-test "SM-DSL" (sm-dsl::path "test-mech.lisp"))
 (load (sm-dsl::path "test-mech.lisp"))
  (stack-dsl::initialize-types (sm-dsl::path "types.json"))
 #| (inspect (gethash "machineDescriptor" stack-dsl::*type-hash*)) |#
  (load (sm-dsl::path "trace-mechs.lisp"))
  (load (sm-dsl::path "trace-rules.lisp"))
#+end_src
#| <<to here>> |#
 (let ((pasm:*pasm-accept-tracing* t)(pasm:*pasm-tracing* nil)) (sm-dsl::transpile-test (sm-dsl::path "test-sm.dsl") (sm-dsl::path "test-sm.lisp")))
 (load (sm-dsl::path "test-sm.lisp"))



#+name: dsl
#+begin_src lisp :results output
 (stack-dsl::generate)
 (ql:quickload :sm-dsl)
 (ql:quickload :sm-dsl/generate-stacks)
 (ql:quickload :sm-dsl/generate)
#+end_src

#+name: dsl
#+begin_src lisp :results output
 (sm-dsl::generate-stacks)
 (sm-dsl::generate "SM-DSL")
#+end_src

#+name: dsl
#+begin_src lisp :results output
  (declaim (sb-ext:muffle-conditions style-warning))
  (load (sm-dsl::path "stacks.lisp"))
  (load (sm-dsl::path "classes.lisp"))
  (load (sm-dsl::path "macros.lisp"))
  (load (sm-dsl::path "mechanisms.lisp"))
  (load (sm-dsl::path "sm-dsl.lisp"))
  (load (sm-dsl::path "trace-mechs.lisp"))
  (load (sm-dsl::path "trace-rules.lisp"))
  (load (sm-dsl::path "type-descriptor.lisp"))
  (load (sm-dsl::path "types.lisp"))
  (stack-dsl::initialize-types)
#+end_src

#+begin_src lisp :results output
  (declaim (sb-ext:muffle-conditions style-warning))
  (stack-dsl::initialize-types)
  (load (sm-dsl::path "test.lisp"))
  (sm-dsl::trace-all)
  (sm-dsl::trace-all-rules)
#+end_src

#+RESULTS:

#+name: dsl
#+begin_src lisp :results output
  (sm-dsl::test)
#+end_src
#+name: dsl

#+begin_src lisp :results output
  (sm-dsl::test2)
  #| (inspect sm-dsl::*pp*) |#
#+end_src

#+name: dsl
#+begin_src lisp :results output
  (load (sm-dsl::path "transpile.lisp"))
#+end_src

* results
#+RESULTS: dsl
: transpiling stacks.dsl...
: in stack-dsl
: *** calling initially on stack-dsl-parser
: *** calling initially on stack-dsl-parser
: file /home/tarvydas/quicklisp/local-projects/sm-dsl/stacks.lisp written


