* intro
  Simple V0 version of a state machine DSL.  See comments in test.lisp for details.
* under development
* 1a. generate stacks.lisp
#+name: dsl
#+begin_src lisp :results output
 (uiop:run-program "rm -rf ~/.cache/common-lisp ;
 rm -rf ~/quicklisp/local-projects/*/*.fasl ;
 rm -rf ~/quicklisp/local/projects/*/*~")
 (ql:quickload :sm-dsl)
#+end_src

#+name: dsl
#+begin_src lisp :results output
  (load (sm-dsl::path "generate-stacks.lisp"))
#+end_src
#+name: dsl
#+begin_src lisp :results output
  (sm-dsl::generate-stacks)
#+end_src

#+name: dsl
#+begin_src lisp :results output
#+end_src

* 1b. generate sm-dsl.lisp
#+name: dsl
#+begin_src lisp :results output
 (uiop:run-program "rm -rf ~/.cache/common-lisp ;
 rm -rf ~/quicklisp/local-projects/*/*.fasl ;
 rm -rf ~/quicklisp/local/projects/*/*~")
 (ql:quickload :sm-dsl/generate)
#+end_src

#+name: dsl
#+begin_src lisp :results output
  #| generates sm-dsl.lisp |#
 (sm-dsl::generate "SM-DSL")
#+end_src

* use
#+name: dsl
#+begin_src lisp :results output
  #| checks that :sm-dsl/use can be loaded |#
 (uiop:run-program "rm -rf ~/.cache/common-lisp ;
 rm -rf ~/quicklisp/local-projects/*.fasl ;
 rm -rf ~/quicklisp/local/projects/*~")
 (ql:quickload :stack-dsl/use)
#+end_src

* Main (non-dev)
#+name: dsl
#+begin_src lisp :results output
 (stack-dsl::generate)
 (ql:quickload :sm-dsl)
 (ql:quickload :sm-dsl/generate-stacks)
 (ql:quickload :sm-dsl/generate)
#+end_src

#+name: dsl
#+begin_src lisp :results output
 (sm-dsl::generate-stacks)
 (sm-dsl::generate "SM-DSL")
#+end_src

#+name: dsl
#+begin_src lisp :results output
  (declaim (sb-ext:muffle-conditions style-warning))
  (load (sm-dsl::path "stacks.lisp"))
  (load (sm-dsl::path "classes.lisp"))
  (load (sm-dsl::path "macros.lisp"))
  (load (sm-dsl::path "mechanisms.lisp"))
  (load (sm-dsl::path "sm-dsl.lisp"))
  (load (sm-dsl::path "trace-mechs.lisp"))
  (load (sm-dsl::path "trace-rules.lisp"))
  (load (sm-dsl::path "type-descriptor.lisp"))
  (load (sm-dsl::path "types.lisp"))
  (stack-dsl::initialize-types)
#+end_src

#+begin_src lisp :results output
  (declaim (sb-ext:muffle-conditions style-warning))
  (stack-dsl::initialize-types)
  (load (sm-dsl::path "test.lisp"))
  (sm-dsl::trace-all)
  (sm-dsl::trace-all-rules)
#+end_src

#+RESULTS:

#+name: dsl
#+begin_src lisp :results output
  (sm-dsl::test)
#+end_src
#+name: dsl

#+begin_src lisp :results output
  (sm-dsl::test2)
  #| (inspect sm-dsl::*pp*) |#
#+end_src

#+name: dsl
#+begin_src lisp :results output
  (load (sm-dsl::path "transpile.lisp"))
#+end_src

* development
  Development test sequence...

  running this as a EVAL script (from a string) allows me to reference packages that
  not available at compile time, but are loaded during the execution of the script
#+name: dsl
#+begin_src lisp :results output
(proclaim '(optimize (debug 3) (safety 3) (speed 0)))
(declaim (sb-ext:muffle-conditions style-warning))
(ql:quickload :sm-dsl)
(let ((cmds (read-from-string "(
		 (uiop:run-program \"rm -rf ~/.cache/common-lisp ;
		  rm -rf ~/quicklisp/local-projects/*.fasl ;
		  rm -rf ~/quicklisp/local/projects/*~\")
		 (ql:quickload :stack-dsl/generate)
		 (stack-dsl::generate)
		 (ql:quickload :sm-dsl)
		 (ql:quickload :sm-dsl/generate-stacks)
		 (sm-dsl::generate-stacks)
		 (load (sm-dsl::path \"generate-test.lisp\"))
		 (load (sm-dsl::path \"transpile-test.lisp\"))
		 (load (sm-dsl::path \"stacks.lisp\"))
		 (load (sm-dsl::path \"classes.lisp\"))
		 (load (sm-dsl::path \"macros.lisp\"))
		 (load (sm-dsl::path \"mechanisms.lisp\"))
		 (sm-dsl::generate-test \"SM-DSL\" (sm-dsl::path \"test-mech.lisp\"))
		 (load (sm-dsl::path \"test-mech.lisp\"))
		 (stack-dsl::initialize-types (sm-dsl::path \"types.json\"))
		 (load (sm-dsl::path \"trace-mechs.lisp\"))
		 (load (sm-dsl::path \"trace-rules.lisp\"))
	   )")))
    (dolist (cmd cmds)   
      (format *standard-output* "~%eval ~s" cmd)
      (eval cmd)))
		 #| (inspect (gethash "machineDescriptor" stack-dsl::*type-hash*)) |#
#+end_src
#| <<to here>> |#
#| test-sm.dsl contains test scripts - transpiled using test-mech.lisp above (transpiled from sm-dsl.pasm) #|
 (let ((pasm:*pasm-accept-tracing* t)(pasm:*pasm-tracing* t)) (sm-dsl::transpile-test (sm-dsl::path "test-sm.dsl") (sm-dsl::path "test-sm.lisp")))
 (load (sm-dsl::path "test-sm.lisp"))

* results
#+RESULTS: dsl
#+begin_example
To load "sm-dsl":
  Load 1 ASDF system:
    sm-dsl
; Loading "sm-dsl"


eval (UIOP/RUN-PROGRAM:RUN-PROGRAM "rm -rf ~/.cache/common-lisp ;
		  rm -rf ~/quicklisp/local-projects/*.fasl ;
		  rm -rf ~/quicklisp/local/projects/*~")
eval (QUICKLISP-CLIENT:QUICKLOAD :STACK-DSL/GENERATE)To load "stack-dsl/generate":
  Load 1 ASDF system:
    stack-dsl/generate
; Loading "stack-dsl/generate"


eval (STACK-DSL::GENERATE)
eval (QUICKLISP-CLIENT:QUICKLOAD :SM-DSL)To load "sm-dsl":
  Load 1 ASDF system:
    sm-dsl
; Loading "sm-dsl"
[package sm-dsl]

eval (QUICKLISP-CLIENT:QUICKLOAD :SM-DSL/GENERATE-STACKS)To load "sm-dsl/generate-stacks":
  Load 1 ASDF system:
    sm-dsl/generate-stacks
; Loading "sm-dsl/generate-stacks"


eval (SM-DSL::GENERATE-STACKS)
transpiling stacks.dsl...
in stack-dsl
,*** calling initially on stack-dsl-parser
,*** calling initially on stack-dsl-parser
file /home/tarvydas/quicklisp/local-projects/sm-dsl/stacks.lisp written

eval (LOAD (SM-DSL::PATH "generate-test.lisp"))
eval (LOAD (SM-DSL::PATH "transpile-test.lisp"))
eval (LOAD (SM-DSL::PATH "stacks.lisp"))
eval (LOAD (SM-DSL::PATH "classes.lisp"))
eval (LOAD (SM-DSL::PATH "macros.lisp"))
eval (LOAD (SM-DSL::PATH "mechanisms.lisp"))
eval (SM-DSL::GENERATE-TEST "SM-DSL" (SM-DSL::PATH "test-mech.lisp"))
eval (LOAD (SM-DSL::PATH "test-mech.lisp"))
eval (STACK-DSL::INITIALIZE-TYPES (SM-DSL::PATH "types.json"))
eval (LOAD (SM-DSL::PATH "trace-mechs.lisp"))
eval (LOAD (SM-DSL::PATH "trace-rules.lisp"))
#+end_example


